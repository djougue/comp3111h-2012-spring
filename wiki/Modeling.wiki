#summary The domain model and the use-case model of ezMeal system.
#labels Featured,Phase-Design

= Domain and Use-Case Model =
  * [Modeling#Introduction Introduction]
  * [Modeling#Domain_Model Domain Model]
  * [Modeling#Use-Case_Model Use-Case Model]
    * [Modeling#Actors Actors]
      * [Modeling#User User]
      * [Modeling#Administrator Administrator]
    * [Modeling#Use_Case Use Case]
      * [Modeling#Register Register]
      * [Modeling#Login Login]
      * [Modeling#Search Search]
      * [Modeling#SHAKE SHAKE]
      * [Modeling#Comment Comment]
      * [Modeling#Rate Rate]
      * [Modeling#Upload_Photos Upload Photos]
      * [Modeling#Modify_Personal_Taste Modify Personal Taste]
      * [Modeling#Manage_Dish Manage Dish]
      * [Modeling#Manage_User Manage User]
  * [Modeling#Download Download]
----

= Introduction =
This wiki pages contains a class diagram showing the domain model classes, their attributes and the associations or association classes that relate the classes; and a use-case diagram showing the actors and use cases and how they are related.

= Domain Model =
[https://comp3111h-2012-spring.googlecode.com/svn/images/modeling/domain-model.png]

= Use-Case Model =
[https://comp3111h-2012-spring.googlecode.com/svn/images/modeling/use-case-model.png]

== Actors ==
==== User ====
A User is a registered person of ezMeal, who can login to ezMeal to browse all dishes in terms of their personal taste and the ranking of dishes, rate dishes, comment on dishes, upload related photos, and modify personal information. A User is able to use ezMeal on a mobile device with Android.

==== Administrator ====
An Administrator is a person who maintains the information of the dishes and users. An Administrator uses a admin website to add or delete dishes and export users’ information.

== Use Case ==
==== Register ====
  * Participating actors: Initiated by User.
  * Purpose: Enable users' information to be recorded in ezMeal's database
  * Flow of events: 
    # A user submits ITSC account and ezMeal password.
    # The system checks the correctness of the user information.
    # The registration information is sent to the server.
    # An aunthentication/activation email is sent to the user.
    # The user clicks on the randomly generated link included in the email to activate his/her account.
    # The use is successfully registered.
  * Nonfunctional requirements: 
    # No space is allowed in the password.
    # After the submission of the user's information, the user will be put in to the temporary user table in the database.

==== Login ====
  * Participating actors: Initiated by User.
  * Purpose: Enable the user to comment on dishes, upload photos, and browse dishes according to his/her personal taste.
  * Flow of events: 
    # A user enters his/her ezMeal user name (ITSC account) and password.
    # The system checks the correctness of the format of the user's input.
    # The login information is sent to the server.
    # The server send the login status (successful of failed) to the client).
    # Go to the main page if login is successful.
  * Nonfunctional requirements: 
    # The system should check the network availability when the user clicks the _Login_ button.
    # The system should stop listening to the response from the server and display error message if timeout (30 seconds).

==== Search ====
  * Participating actors: Initiated by User.
  * Purpose: The use case enables a user to browse dishes with some customized limitations.
  * Flow of events: 
    # The User activates the “search” page in his/her terminal.
    # The User inputs some conditions for the dishes he/she wants.
    # The User receives the search result.
  * Nonfunctional requirements: 
    # The allowed filters include dish name, favor, canteen, price, available time and rating.
    # The results of browsing or filtering should be displayed in a tabular format showing the dish thumbnail, if any, name, price, canteen and available time.
    # It should be possible to order the dishes by price and group by canteen or available time.
    # From this display of dishes it should be possible to go directly to a dish’s web page.

==== SHAKE ====
  * Participating actors: Initiated by User.
  * Purpose: When a user want the system to recommend a dish to him/her, SHAKE will choose a dish randomly for the user.
  * Flow of events: 
    # The User activates the “SHAKE” page in his/her terminal.
    # The User specifies the a canteen.
    # The User receives the random-picked-up dish in the menu of the canteen.
  * Nonfunctional requirements:
    # The chosen dish should be available in current time slot.
    # The name and a picture of the dish should appears in the page.
    # For registered user, the result should be related to their taste preference.

==== Comment ====
  * Participating actors: Initiated by User.
  * Purpose: User can write comments on the dishes.
  * Flow of events: 
    # The User writes comments in the dialog.
    # The User submits comments.
    # The User receives acknowledge upon successful commenting.
  * Nonfunctional requirements: 
    # The comment dialog shall appear at the bottom of the detailed page
    # User can comments on the same dish for several times
    # One user can comment on several different dishes.

==== Rate ====
  * Participating actors: Initiated by User.
  * Purpose: This use case allow users to rate a dish and enable searching by rating.
  * Flow of events: 
    # The User rates the dish.
    # The rate is sent to the system.
    # The User is acknowledged once rated.
  * Nonfunctional requirements: 
    # Rating is in the form of stars.
    # User give 1-5 stars for a dish and the system calculates the total average rating
    # The rating stars should appear above the comments dialog in the detailed page.
    # The default stars before use rating shall be the average rating.
    # After rating there shall be a small word indicating that the user has already rated the dish.
    # User can only rate a dish once but could modify their rating.

==== Upload Photos ====
  * Participating actors: Initiated by User.
  * Purpose: User can upload their photos of dishes.
  * Flow of events: 
    # The User upload the desired photo.
    # The photo is submitted to the server system.
    # The User receive acknowledge upon successful upload.
  * Nonfunctional requirements: 
    # The _Upload Photo_ button is in the Detailed page.
    # User can upload any numbers of photos of any number of dishes.
    # Uploaded photos should within some certain size.
    # Uploaded photos will appear in Gallery page.

==== Modify Personal Taste ====
  * Participating actors: Initiated by User.
  * Purpose: Enable users to edit their personal taste after registering and enable searching by tastes as well as SHAKE function.
  * Flow of events: 
    # The User modifies their personal taste.
    #The request is sent to the system and the information is updated.
    # The User receive acknowledgement of successful modification.
  * Nonfunctional requirements: 
    # The personal taste setting is shown in _Personal Taste_ Page.
    # The User should see the same information on different device.
    # The User can modify their personal tastes infinite number of times.

==== Manage User ====
  * Participating actors: Initiated by Administrator.
  * Purpose: Administrator takes the responsibility to keep the dish database up to date.
  * Flow of events: 
    # The Administrator send update dishes request.
    # The request is sent to the system.
    # The Administrator receive acknowledgement once the system is updated.
  * Nonfunctional requirements: 
    # The Administrator adds new dishes or deletes canceled dishes from time to time to keep dish information up to date.
    # The User shall not have the direct access to manage the dish information.
    # The Administrator can modify the default dish photo from the gallery in this process.

==== Manage Dish ====
  * Participating actors: Initiated by Administrator.
  * Purpose: Enable the Administrator to manage the users account.
  * Flow of events:
    # The Administrator modify the user account.
    # The request is sent to the system.
    # The Administrator receive acknowledgement upon user account update.
  * Nonfunctional requirements: 
    # The Administrator has access to user’s account information.
    # The Administrator should delete the “zombie fan” or fake users.
    # The User shall not have the access to alter other user account.

= Download =
You can also download the original files of the domain model and the use-case model under the "Download" tab of ezMeal's Google Code site.

Quick links to the download page:
  * [http://code.google.com/p/comp3111h-2012-spring/downloads/detail?name=domain-model.emx&can=2&q= Domain model]
  * [http://code.google.com/p/comp3111h-2012-spring/downloads/detail?name=use-case-model.emx&can=2&q= Use-case model]